{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Who We Are There are many important sectors of the aerospace industry, and one of the fastest growing and most hyped is that of the 'drone', or more properly, 'unmanned aerial vehicle' or 'system'- a UAV or UAS. With the beginning of the UAV Team, the Aerospace Club has opened up the possibility of projects which are almost entirely software based, bringing the realms of cutting-edge aerospace development directly to students of Computer Science and Computer and Software Engineering at the University of Nebraska-Lincoln. What We Do The UNL Aerospace UAV IARC Team is comprised into two subteams focused on hardware and software. We aim to accomplish the Mission 9 objectives layed out by AUVSI IARC Mission 9 rules by building an unmanned aerial platform. What is AUVSI IARC The Association for Unmanned Vehicle Systems International (AUVSI), the world's largest nonprofit organization dedicated to the advancement of unmanned systems and robotics, represents corporations and professionals from more than 60 countries involved in industry, government and academia. AUVSI members work in the defense, civil and commercial markets. Visit AUVSI at www.auvsi.org . The IARC is the longest running collegiate aerial robotics competition in the world, challenging competing teams to develop robotic aerial systems considered impossible for any robots currently owned by government or industry. The IARC proceeds in a series of 'missions', with teams continuing to attempt a particular mission for multiple years until one team succeeds and a new mission is started. Visit the IARC challenge at www.aerialroboticscompetition.org . Mission 9 Objective Fly fully autonomous Use ONBOARD computing (no data links except for kill switch and safety pilot override) Avoid obstacles including: Other aerial robots Physical obstacles Conduct the mission successfully (replace the module and return home) under 9 minutes A link to the AUVSI IARC Mission 9 rules can be found here: MISSION 9 RULES License This website is released using Creative Commons Attribution license.","title":"Home"},{"location":"#who-we-are","text":"There are many important sectors of the aerospace industry, and one of the fastest growing and most hyped is that of the 'drone', or more properly, 'unmanned aerial vehicle' or 'system'- a UAV or UAS. With the beginning of the UAV Team, the Aerospace Club has opened up the possibility of projects which are almost entirely software based, bringing the realms of cutting-edge aerospace development directly to students of Computer Science and Computer and Software Engineering at the University of Nebraska-Lincoln.","title":"Who We Are"},{"location":"#what-we-do","text":"The UNL Aerospace UAV IARC Team is comprised into two subteams focused on hardware and software. We aim to accomplish the Mission 9 objectives layed out by AUVSI IARC Mission 9 rules by building an unmanned aerial platform.","title":"What We Do"},{"location":"#what-is-auvsi-iarc","text":"The Association for Unmanned Vehicle Systems International (AUVSI), the world's largest nonprofit organization dedicated to the advancement of unmanned systems and robotics, represents corporations and professionals from more than 60 countries involved in industry, government and academia. AUVSI members work in the defense, civil and commercial markets. Visit AUVSI at www.auvsi.org . The IARC is the longest running collegiate aerial robotics competition in the world, challenging competing teams to develop robotic aerial systems considered impossible for any robots currently owned by government or industry. The IARC proceeds in a series of 'missions', with teams continuing to attempt a particular mission for multiple years until one team succeeds and a new mission is started. Visit the IARC challenge at www.aerialroboticscompetition.org .","title":"What is AUVSI IARC"},{"location":"#mission-9-objective","text":"Fly fully autonomous Use ONBOARD computing (no data links except for kill switch and safety pilot override) Avoid obstacles including: Other aerial robots Physical obstacles Conduct the mission successfully (replace the module and return home) under 9 minutes A link to the AUVSI IARC Mission 9 rules can be found here: MISSION 9 RULES","title":"Mission 9 Objective"},{"location":"#license","text":"This website is released using Creative Commons Attribution license.","title":"License"},{"location":"creating_docs/","text":"Creating Documention This is a useful guide on how to start writing documentation. We will be using git to control what information get in and what information doesn't get in. Novice This is indended for people who is less technical about git and github. Just want to publish an documentation. Here is how to do it. Go to GitHub Create an account Go to our Documentation Repo Click Issues Create new Issue If applicable select add documentation template. Fill out the form. Attach your information that you want to publish. Submit Wait for it to publish Advanced This is for the people who want to get done now and knows git/github. Login to Github Fork the Repository. Use the clone command for your forked repository. (Check how below) Add, Modify, Remove your forked repository with the necessary documents. Create Pull Request on UNL-UAV Repo. Resources/FAQ Git Resources Give a man a fish and you feed him for a day; Teach a man to fish and you feed him for a lifetime. Try Git Markdown Resources Learn Markdown Cheat Sheet Live Editor Cloning the Repository git clone https://github.com/UNL-UAV/unl-uav.github.io --branch docs . Make sure you have --branch docs otherwise you will enter in the wrong branch. Adding Documents Add all new documents in the /docs/ directory. With the extension of .md . Commit and push. Deploying Deploying to the website is as simple as pushing to the docs repository. It will take up to a minute for the website to load and refreash the cache. To bypass the cache you can press either key combination: CTRL+R Command+R Shift+F5 Shift+Reload Button CTRL+F5","title":"Creating Documentation"},{"location":"creating_docs/#creating-documention","text":"This is a useful guide on how to start writing documentation. We will be using git to control what information get in and what information doesn't get in.","title":"Creating Documention"},{"location":"creating_docs/#novice","text":"This is indended for people who is less technical about git and github. Just want to publish an documentation. Here is how to do it. Go to GitHub Create an account Go to our Documentation Repo Click Issues Create new Issue If applicable select add documentation template. Fill out the form. Attach your information that you want to publish. Submit Wait for it to publish","title":"Novice"},{"location":"creating_docs/#advanced","text":"This is for the people who want to get done now and knows git/github. Login to Github Fork the Repository. Use the clone command for your forked repository. (Check how below) Add, Modify, Remove your forked repository with the necessary documents. Create Pull Request on UNL-UAV Repo.","title":"Advanced"},{"location":"creating_docs/#resourcesfaq","text":"","title":"Resources/FAQ"},{"location":"creating_docs/#git-resources","text":"Give a man a fish and you feed him for a day; Teach a man to fish and you feed him for a lifetime. Try Git","title":"Git Resources"},{"location":"creating_docs/#markdown-resources","text":"Learn Markdown Cheat Sheet Live Editor","title":"Markdown Resources"},{"location":"creating_docs/#cloning-the-repository","text":"git clone https://github.com/UNL-UAV/unl-uav.github.io --branch docs . Make sure you have --branch docs otherwise you will enter in the wrong branch.","title":"Cloning the Repository"},{"location":"creating_docs/#adding-documents","text":"Add all new documents in the /docs/ directory. With the extension of .md . Commit and push.","title":"Adding Documents"},{"location":"creating_docs/#deploying","text":"Deploying to the website is as simple as pushing to the docs repository. It will take up to a minute for the website to load and refreash the cache. To bypass the cache you can press either key combination: CTRL+R Command+R Shift+F5 Shift+Reload Button CTRL+F5","title":"Deploying"},{"location":"credits/","text":"Credits Thanks to @Root3287 for setting up the original page on 8/5/2020. For site maintance, create an issue on our github page","title":"Credits"},{"location":"credits/#credits","text":"Thanks to @Root3287 for setting up the original page on 8/5/2020. For site maintance, create an issue on our github page","title":"Credits"},{"location":"onboarding/","text":"Onboarding Activity Requirements There are a few things that members must complete to be considered a full member on the team. These usually include paying dues, completing safety training, completing lab access agreement form, and engaging in outreach opportunities. Dues are $20 and can be directly paid to the club treasurer, or any one of the team leads. Cash is preferred. Safety training can be completed independently, however, there will be an opportunity to knock out safety training in one sitting. Upon completing safety training, lab access agreement form, and dues, members are granted lab access. This year, due to policies put into effect because of Covid-19, completing the two hours outreach requirements is temporarily not required. Members can and will have the opportunity to participate in outreach events, if desired. This usually entails advertising the Aerospace club at a club fair or volunteering with kids as an aerospace ambassador. Lab Safety Trainings To complete club safety training, visit this website: https://ehs.unl.edu/web-based-training Once there, you will need to click on the four hyperlinks for Core \u2013 Injury and Illness Prevention Plan (IIPP) Core \u2013 Emergency Preparedness Training General Electrical Safety Awareness Personal Protective Equipment (PPE). You will be provided material to read for each one and then a quiz to take after you have read it. Once you pass the quiz, you should receive an email from the site saying that you have done so. When you receive this email, please forward it to unl.aerospace.safety.training@gmail.com Forms to Submit Travelers Form Lab Access Team Structure The team is loosely divided into hardware and software. The hardware group is responsible for designing and constructing the drones needed for design decisions. They are responsible for developing the drones\u2019 autonomy, supporting the hardware requirements for the software, and maintaining the telemetry feed. The software group is responsible for developing the on-board computer vision systems that receive commands and transmit parsed images to the operator. Competition IARC Mission 9 has challenged us to build and program a fully autonomous aerial system that is capable of performing tasks in mid-air. Below is a gist of Mission 9 objectives: Fly fully autonomous Use ONBOARD Computing (no data links except for kill switch and safety pilot override) Avoid other aerial robots Avoid physical obstacles Conduct the mission successfully (replace a communication module and return home) under 9 minutes Funding The UAV team gets its primary funding from two sources: NASA Nebraska and eSAB. NASA Nebraska is the largest source of funding, usually granting us between $6,500 - $8,000 each year. This year the grant award amount is capped at $7000. eSAB funding is reimburse-only, meaning members would need to make the initial purchase and then get reimbursed for the amount later.. We are usually granted between $3,750 - $5,000 from eSAB. Travelling For Mission 9, IARC is hosting the competition at Front Royal, Virginia. The competition is usually a three days event and occurs during the first few weeks of August. To travel, members must have paid their dues, completed safety training, and completed their outreach requirements. Helpful Links IARC website Mission 9 rules Slack desktop app download UAV website Aerospace website","title":"Onboarding"},{"location":"onboarding/#onboarding","text":"","title":"Onboarding"},{"location":"onboarding/#activity-requirements","text":"There are a few things that members must complete to be considered a full member on the team. These usually include paying dues, completing safety training, completing lab access agreement form, and engaging in outreach opportunities. Dues are $20 and can be directly paid to the club treasurer, or any one of the team leads. Cash is preferred. Safety training can be completed independently, however, there will be an opportunity to knock out safety training in one sitting. Upon completing safety training, lab access agreement form, and dues, members are granted lab access. This year, due to policies put into effect because of Covid-19, completing the two hours outreach requirements is temporarily not required. Members can and will have the opportunity to participate in outreach events, if desired. This usually entails advertising the Aerospace club at a club fair or volunteering with kids as an aerospace ambassador.","title":"Activity Requirements"},{"location":"onboarding/#lab-safety-trainings","text":"To complete club safety training, visit this website: https://ehs.unl.edu/web-based-training Once there, you will need to click on the four hyperlinks for Core \u2013 Injury and Illness Prevention Plan (IIPP) Core \u2013 Emergency Preparedness Training General Electrical Safety Awareness Personal Protective Equipment (PPE). You will be provided material to read for each one and then a quiz to take after you have read it. Once you pass the quiz, you should receive an email from the site saying that you have done so. When you receive this email, please forward it to unl.aerospace.safety.training@gmail.com","title":"Lab Safety Trainings"},{"location":"onboarding/#forms-to-submit","text":"Travelers Form Lab Access","title":"Forms to Submit"},{"location":"onboarding/#team-structure","text":"The team is loosely divided into hardware and software. The hardware group is responsible for designing and constructing the drones needed for design decisions. They are responsible for developing the drones\u2019 autonomy, supporting the hardware requirements for the software, and maintaining the telemetry feed. The software group is responsible for developing the on-board computer vision systems that receive commands and transmit parsed images to the operator.","title":"Team Structure"},{"location":"onboarding/#competition","text":"IARC Mission 9 has challenged us to build and program a fully autonomous aerial system that is capable of performing tasks in mid-air. Below is a gist of Mission 9 objectives: Fly fully autonomous Use ONBOARD Computing (no data links except for kill switch and safety pilot override) Avoid other aerial robots Avoid physical obstacles Conduct the mission successfully (replace a communication module and return home) under 9 minutes","title":"Competition"},{"location":"onboarding/#funding","text":"The UAV team gets its primary funding from two sources: NASA Nebraska and eSAB. NASA Nebraska is the largest source of funding, usually granting us between $6,500 - $8,000 each year. This year the grant award amount is capped at $7000. eSAB funding is reimburse-only, meaning members would need to make the initial purchase and then get reimbursed for the amount later.. We are usually granted between $3,750 - $5,000 from eSAB.","title":"Funding"},{"location":"onboarding/#travelling","text":"For Mission 9, IARC is hosting the competition at Front Royal, Virginia. The competition is usually a three days event and occurs during the first few weeks of August. To travel, members must have paid their dues, completed safety training, and completed their outreach requirements.","title":"Travelling"},{"location":"onboarding/#helpful-links","text":"IARC website Mission 9 rules Slack desktop app download UAV website Aerospace website","title":"Helpful Links"},{"location":"people/","text":"People Andrew Hossack - President Hi Everyone! My name is Andrew Hossack, but some of you might know me as the \"UAV Guy\" on campus. I am the president of UAV IARC Team, and Secretary of Aerospace for the 20'-21' year. Currently a Junior working towards my B.S. in Computer Engineering, I have a passion in aerospace, IoT, and most things up in space or in the air. Currently I am employed as an E.E. intern at Honeybee Robotics - an awesome company who designs space mechanical and electrical systems! One word of advice is that you can do whatever you put your mind to, you just need to work hard and listen! Shoot for the stars! Khawm Mung - Director of Development Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Timothy Gibbons - Software Developer Website HAHA HTML GO BRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Pradhyun Kashyap - Remote Pilot and Support Unmanned aircraft systems, or drones are no longer toys or hobby, these are now a tool for entry into dozens of lucrative careers. As a Certified Remote Pilot, my job is to manage unmanned aerial vehicle flight operations and make sure to practice all the procedures and policies from Federal Aviation Administration (FAA) to include standard flight and ground operations. Also, my primary tasks include building flight vehicle structure and related components as a support assistance to the hardware team. Gerson Uriarte - Software Team Lead Pursuing a Bachelor of Science in Computer Engineering and pre-med status. Work with the software team to develop software that will be on the companion computer, controlling the UAS. Currently doing research at Nimbus Labs on campus. I want to go to med school but am passionate about technology and computers. I enjoy working on software and doing research.","title":"People"},{"location":"people/#people","text":"Andrew Hossack - President Hi Everyone! My name is Andrew Hossack, but some of you might know me as the \"UAV Guy\" on campus. I am the president of UAV IARC Team, and Secretary of Aerospace for the 20'-21' year. Currently a Junior working towards my B.S. in Computer Engineering, I have a passion in aerospace, IoT, and most things up in space or in the air. Currently I am employed as an E.E. intern at Honeybee Robotics - an awesome company who designs space mechanical and electrical systems! One word of advice is that you can do whatever you put your mind to, you just need to work hard and listen! Shoot for the stars! Khawm Mung - Director of Development Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Timothy Gibbons - Software Developer Website HAHA HTML GO BRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Pradhyun Kashyap - Remote Pilot and Support Unmanned aircraft systems, or drones are no longer toys or hobby, these are now a tool for entry into dozens of lucrative careers. As a Certified Remote Pilot, my job is to manage unmanned aerial vehicle flight operations and make sure to practice all the procedures and policies from Federal Aviation Administration (FAA) to include standard flight and ground operations. Also, my primary tasks include building flight vehicle structure and related components as a support assistance to the hardware team. Gerson Uriarte - Software Team Lead Pursuing a Bachelor of Science in Computer Engineering and pre-med status. Work with the software team to develop software that will be on the companion computer, controlling the UAS. Currently doing research at Nimbus Labs on campus. I want to go to med school but am passionate about technology and computers. I enjoy working on software and doing research.","title":"People"},{"location":"resources/","text":"Resources Useful Links UNL Aerospace Website Contest Rules UNL Aerospace GitHub AUVSI IARC Foundation Website Slack To join our slack contact me at andrew_hossack@outlook.com Additional resources can be found on the club's Google Drive and Box accounts.","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#useful-links","text":"UNL Aerospace Website Contest Rules UNL Aerospace GitHub AUVSI IARC Foundation Website","title":"Useful Links"},{"location":"resources/#slack","text":"To join our slack contact me at andrew_hossack@outlook.com Additional resources can be found on the club's Google Drive and Box accounts.","title":"Slack"},{"location":"teams/","text":"Teams Software The software subteam is tasked with developing and integrating systems and technologies to keep the drone in the sky. The team uses technologies including C++, Linux, git, and the Robot Operating System, as well as the MAVLink protocol and Open Computer Vision. The software subteam is comprised of two project teams that work in an agile software development environment. The two project teams, led by experienced project managers, focus on two separate areas: navigation and vision/intelligence. The navigation project team deals with processing the geographical position of the drone, plotting best possible courses, and optimizing drone flight patterns. The vision/intelligence team deals with machine perception and processing video data. The data is compiled and interpreted to present the drone with a best course of action in any scenario. If you are interested in software engineering, machine perception, computer vision, artificial intelligence, or automata, this is the team for you! Hardware For all the software work that goes into a UAV, it can't get off the ground without the necessary mechanical structures and systems for the software to interact with. To this end, our Hardware Group is tasked with designing, producing, and assembling all structural and mechanical components of the aerial system. These components have included everything from custom landing legs and specialty components for completing the competition, to a solution for battery attachment and testing and maintenance on the frame. This requires familiarity with the tools and equipment necessary for effective component production, including power tools, machine tools, and even a 3D printer, as well as computing tools. The computing tools used by the Hardware Group mostly consist of the program SolidWorks, to include its 3D CAD design suite, as well as structural and fluid simulation. When simulations require a second opinion, ANSYS is utilized.","title":"Teams"},{"location":"teams/#teams","text":"","title":"Teams"},{"location":"teams/#software","text":"The software subteam is tasked with developing and integrating systems and technologies to keep the drone in the sky. The team uses technologies including C++, Linux, git, and the Robot Operating System, as well as the MAVLink protocol and Open Computer Vision. The software subteam is comprised of two project teams that work in an agile software development environment. The two project teams, led by experienced project managers, focus on two separate areas: navigation and vision/intelligence. The navigation project team deals with processing the geographical position of the drone, plotting best possible courses, and optimizing drone flight patterns. The vision/intelligence team deals with machine perception and processing video data. The data is compiled and interpreted to present the drone with a best course of action in any scenario. If you are interested in software engineering, machine perception, computer vision, artificial intelligence, or automata, this is the team for you!","title":"Software"},{"location":"teams/#hardware","text":"For all the software work that goes into a UAV, it can't get off the ground without the necessary mechanical structures and systems for the software to interact with. To this end, our Hardware Group is tasked with designing, producing, and assembling all structural and mechanical components of the aerial system. These components have included everything from custom landing legs and specialty components for completing the competition, to a solution for battery attachment and testing and maintenance on the frame. This requires familiarity with the tools and equipment necessary for effective component production, including power tools, machine tools, and even a 3D printer, as well as computing tools. The computing tools used by the Hardware Group mostly consist of the program SolidWorks, to include its 3D CAD design suite, as well as structural and fluid simulation. When simulations require a second opinion, ANSYS is utilized.","title":"Hardware"},{"location":"welcome/","text":"Getting Started Welcome to our team! If you are reading this, it might mean that you are either a potential member or new member of our team. Outlined in this page are the basic steps for joining the team. Team Communication Most team communication is done through Slack on the UNL Aerospace #uav-general channel. Team meetings will be held either in person or remote or both during the year. To make sure you are the most up to date with current communication, please download Slack and Zoom as outlined below. Slack To download slack, please visit the Slack Download Link . After downloading slack, request to join the Aerospace channel at unlaerospace.slack.com or by sending an email to Andrew Hossack at andrew_hossack@outlook.com , as noted in Resources . After joining the UNL Aerospace slack, request to join the #uav-general channel, and any other UAV specific channel you might be interested in, whether it be hardware, software, etc. Zoom General meetings and subteam specific meetings will be held during the week to update on progress and to work. These meetings will be held in person or over Zoom. To download zoom go to the link here Zoom Download . Zoom meeting invites will be sent out in the slack channel to attend remotely. Mission Rules Now that you have downloaded and are part of our primary means of communication, the next step in the process is being knowledgeable of the mission rules and organizer website. Please read the What is AUVSI IARC subheading to know what our organizer is and does, in addition to the Mission 9 Objective to understand the rules under the Home page. After reading these sections, make sure to visit the Mission 9 Rules Link to download and view the mission rules. Understanding the mission objectives, rules, and story is very important in understanding the scope of what type of work you will be doing, so make sure to read this document! Administrative Todo.","title":"Getting Started"},{"location":"welcome/#getting-started","text":"Welcome to our team! If you are reading this, it might mean that you are either a potential member or new member of our team. Outlined in this page are the basic steps for joining the team.","title":"Getting Started"},{"location":"welcome/#team-communication","text":"Most team communication is done through Slack on the UNL Aerospace #uav-general channel. Team meetings will be held either in person or remote or both during the year. To make sure you are the most up to date with current communication, please download Slack and Zoom as outlined below.","title":"Team Communication"},{"location":"welcome/#slack","text":"To download slack, please visit the Slack Download Link . After downloading slack, request to join the Aerospace channel at unlaerospace.slack.com or by sending an email to Andrew Hossack at andrew_hossack@outlook.com , as noted in Resources . After joining the UNL Aerospace slack, request to join the #uav-general channel, and any other UAV specific channel you might be interested in, whether it be hardware, software, etc.","title":"Slack"},{"location":"welcome/#zoom","text":"General meetings and subteam specific meetings will be held during the week to update on progress and to work. These meetings will be held in person or over Zoom. To download zoom go to the link here Zoom Download . Zoom meeting invites will be sent out in the slack channel to attend remotely.","title":"Zoom"},{"location":"welcome/#mission-rules","text":"Now that you have downloaded and are part of our primary means of communication, the next step in the process is being knowledgeable of the mission rules and organizer website. Please read the What is AUVSI IARC subheading to know what our organizer is and does, in addition to the Mission 9 Objective to understand the rules under the Home page. After reading these sections, make sure to visit the Mission 9 Rules Link to download and view the mission rules. Understanding the mission objectives, rules, and story is very important in understanding the scope of what type of work you will be doing, so make sure to read this document!","title":"Mission Rules"},{"location":"welcome/#administrative","text":"Todo.","title":"Administrative"},{"location":"drafts/","text":"Drafts Hey, you found me. You read the docs :*","title":"Drafts"},{"location":"drafts/#drafts","text":"Hey, you found me. You read the docs :*","title":"Drafts"},{"location":"drafts/software/","text":"Software Welcome to the software section! Table of Contents Meet the Team FAQ Resources C++ Premake MavLink RoS","title":"Software"},{"location":"drafts/software/#software","text":"Welcome to the software section!","title":"Software"},{"location":"drafts/software/#table-of-contents","text":"Meet the Team FAQ Resources C++ Premake MavLink RoS","title":"Table of Contents"},{"location":"drafts/software/cpp/","text":"C++","title":"C++"},{"location":"drafts/software/cpp/#c","text":"","title":"C++"},{"location":"drafts/software/faq/","text":"FAQ","title":"FAQ"},{"location":"drafts/software/faq/#faq","text":"","title":"FAQ"},{"location":"drafts/software/mavlink/","text":"Mavlink Description Mavlink is a communication protocol that was created to be able to send/receive messages in a unifrom fasihon. The messages are defined in xml files which is refererred to as the dialect of the protocol. A maximum of 255 devices can be connected via the mavlink protocl, and it only uses 14 bytes of overhead. Different Messages The message above is an attitude message that can be used to communicate to the drone what you want it to act like. The messages function as a packet and every message is composed of the same commponents. A full list of the mavlink packets can be found here . Message Components More information can be found here","title":"Mavlink"},{"location":"drafts/software/mavlink/#mavlink","text":"","title":"Mavlink"},{"location":"drafts/software/mavlink/#description","text":"Mavlink is a communication protocol that was created to be able to send/receive messages in a unifrom fasihon. The messages are defined in xml files which is refererred to as the dialect of the protocol. A maximum of 255 devices can be connected via the mavlink protocl, and it only uses 14 bytes of overhead.","title":"Description"},{"location":"drafts/software/mavlink/#different-messages","text":"The message above is an attitude message that can be used to communicate to the drone what you want it to act like. The messages function as a packet and every message is composed of the same commponents. A full list of the mavlink packets can be found here .","title":"Different Messages"},{"location":"drafts/software/mavlink/#message-components","text":"More information can be found here","title":"Message Components"},{"location":"drafts/software/premake/","text":"Premake","title":"Premake"},{"location":"drafts/software/premake/#premake","text":"","title":"Premake"},{"location":"drafts/software/resources/","text":"Resources","title":"Resources"},{"location":"drafts/software/resources/#resources","text":"","title":"Resources"},{"location":"drafts/software/ros/","text":"RoS","title":"RoS"},{"location":"drafts/software/ros/#ros","text":"","title":"RoS"},{"location":"drafts/software/simulation/","text":"mavROS-Simulation Information Repository for getting the simulation up and running. This is using ros and gazebo simulation software. Prerequisite The enviroment you need for the simulation software needs to be ubuntu, any version later than 18.04 should work. The list of things that need to be installed before you can begin using the simulation is in the list below: ROS mavROS geographicLib gazebo px4 firmware GSTREAMER 1 If you have not used ROS before then I would suggest reading through and doing the tutorials. Once you have a basic understanding you should come back and begin using the simulation. A small preview of how this simulation works is in the diagram below: Directions for Installation First you should install ROS, you can use any version that you want to. This tutorial was written using ubuntu 20.04 and the newest realease of ROS, Noetic. You can find the instructions to install ROS The next things that you need to install will be mavROS . You will need to install mavROS by using the commands below sudo apt-get install ros-version-mavros ros-version-mavros-extras Replace version above with your version of mavros. for example if you are using noetic, use ros-version-mavros Next you are going to need to get the geagraphic lib, you need this for mavros so that you can send long/lat. The command is below: wget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh sudo chmod +x install_geographiclib_datasets.sh sudo ./install_geographiclib_datasets.sh You do not need to explicitly install gazebo unless you did not install the full desktop version of ROS The px4 firmware is what is need to simulate the flight controller, and ROS is what is going to be controlling the simulated flight controller. To install the px4 firmware you can fork the repository from our github page or just pull it if you aren't planning on messing with the firmware code, the command is below: git clone git@github.com:UNL-UAV/Firmware.git cd Firmware next you are going to have to install some package dependencies so that you can make the simulation px4 flight controller, please run the commands below to be able to build. sudo apt-get install libprotobuf-dev libprotoc-dev protobuf-compiler libeigen3-dev libxml2-utils python-rospkg python-jinja2 sudo apt-get install libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly -y Now you can run the simulation by using the command below (be sure you're in the Firmware directory that was pulled from Github). It is going to take a really long time to build the first time but afterwards it shouldn't take super long. Also there might be errors that come up because of some other dependencies that weren't included in the installation process, they should all be explicit instructions to install a certain dependency, you should be able to follow the error and resolve it. make px4_sitl gazebo Directions for Running To understand how to run, it is best to understand the logic of how the simulation is running. Look at the diagram above one more time to try and understand it. Theres three different things that need to be running for the simulation to work. First you need to run the gazebo simulation and also connect it to the sitl px4 controller. Then you need to run ROS to create the connection and control the pixhawk. Then you need to run ROS nodes to populate certain topics to control the simulation. Run the gazebo simulation and run the sitl pixhawk. This needs to be done from the Firmware repository directory as all the make files for this command are there. make px4_sitl gazebo To run the ROS simulation you need to launch ROS and connect it to your computer, or you can connect it two whichever computer is running the px4 simulation. roslaunch mavros px4.launch fcu_url:=\"udp://:14540@127.0.0.1:14557\" Then you can run nodes to control your drone. At thsis point all the information between ROS and the sitl pixhawk should be working. This means that you can not run nodes to populate topics to control the drone. If you have not already built nodes, there is an example takeoff already supplied in the repository. To run the takeoff node you have to move to this repository, ..../mavROS-Simulation then run the commands below. If for some reason the code does not compile after catkin_make, check the CMakeLists.txt to make sure the right version of everything is included. catkin_make source devel/setup.bash rosrun examples takeoff_example","title":"mavROS-Simulation"},{"location":"drafts/software/simulation/#mavros-simulation","text":"","title":"mavROS-Simulation"},{"location":"drafts/software/simulation/#information","text":"Repository for getting the simulation up and running. This is using ros and gazebo simulation software.","title":"Information"},{"location":"drafts/software/simulation/#prerequisite","text":"The enviroment you need for the simulation software needs to be ubuntu, any version later than 18.04 should work. The list of things that need to be installed before you can begin using the simulation is in the list below: ROS mavROS geographicLib gazebo px4 firmware GSTREAMER 1 If you have not used ROS before then I would suggest reading through and doing the tutorials. Once you have a basic understanding you should come back and begin using the simulation. A small preview of how this simulation works is in the diagram below:","title":"Prerequisite"},{"location":"drafts/software/simulation/#directions-for-installation","text":"First you should install ROS, you can use any version that you want to. This tutorial was written using ubuntu 20.04 and the newest realease of ROS, Noetic. You can find the instructions to install ROS The next things that you need to install will be mavROS . You will need to install mavROS by using the commands below sudo apt-get install ros-version-mavros ros-version-mavros-extras Replace version above with your version of mavros. for example if you are using noetic, use ros-version-mavros Next you are going to need to get the geagraphic lib, you need this for mavros so that you can send long/lat. The command is below: wget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh sudo chmod +x install_geographiclib_datasets.sh sudo ./install_geographiclib_datasets.sh You do not need to explicitly install gazebo unless you did not install the full desktop version of ROS The px4 firmware is what is need to simulate the flight controller, and ROS is what is going to be controlling the simulated flight controller. To install the px4 firmware you can fork the repository from our github page or just pull it if you aren't planning on messing with the firmware code, the command is below: git clone git@github.com:UNL-UAV/Firmware.git cd Firmware next you are going to have to install some package dependencies so that you can make the simulation px4 flight controller, please run the commands below to be able to build. sudo apt-get install libprotobuf-dev libprotoc-dev protobuf-compiler libeigen3-dev libxml2-utils python-rospkg python-jinja2 sudo apt-get install libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly -y Now you can run the simulation by using the command below (be sure you're in the Firmware directory that was pulled from Github). It is going to take a really long time to build the first time but afterwards it shouldn't take super long. Also there might be errors that come up because of some other dependencies that weren't included in the installation process, they should all be explicit instructions to install a certain dependency, you should be able to follow the error and resolve it. make px4_sitl gazebo","title":"Directions for Installation"},{"location":"drafts/software/simulation/#directions-for-running","text":"To understand how to run, it is best to understand the logic of how the simulation is running. Look at the diagram above one more time to try and understand it. Theres three different things that need to be running for the simulation to work. First you need to run the gazebo simulation and also connect it to the sitl px4 controller. Then you need to run ROS to create the connection and control the pixhawk. Then you need to run ROS nodes to populate certain topics to control the simulation. Run the gazebo simulation and run the sitl pixhawk. This needs to be done from the Firmware repository directory as all the make files for this command are there. make px4_sitl gazebo To run the ROS simulation you need to launch ROS and connect it to your computer, or you can connect it two whichever computer is running the px4 simulation. roslaunch mavros px4.launch fcu_url:=\"udp://:14540@127.0.0.1:14557\" Then you can run nodes to control your drone. At thsis point all the information between ROS and the sitl pixhawk should be working. This means that you can not run nodes to populate topics to control the drone. If you have not already built nodes, there is an example takeoff already supplied in the repository. To run the takeoff node you have to move to this repository, ..../mavROS-Simulation then run the commands below. If for some reason the code does not compile after catkin_make, check the CMakeLists.txt to make sure the right version of everything is included. catkin_make source devel/setup.bash rosrun examples takeoff_example","title":"Directions for Running"},{"location":"drafts/software/team/","text":"Meet the team Timothy Gibbons","title":"Meet the team"},{"location":"drafts/software/team/#meet-the-team","text":"","title":"Meet the team"},{"location":"drafts/software/team/#timothy-gibbons","text":"","title":"Timothy Gibbons"}]}